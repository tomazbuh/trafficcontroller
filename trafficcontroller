#!/bin/bash 
# Traffic Controller by Tomaz Buh <hubber.devel@gmail.com>
# Based on the Wonder Shaper application by bert hubert <ahu@ds9a.nl>, 
# Copyright 2002, Licensed under the GPL 
# and fixes by magnific0
# (http://www.github.com/magnific0/trafficcontroller)
# systemd .service and .conf file by kfgz and cmsigler at aur.archlinux.org
#
# Modify several factors which affect the Quality of Service of networking
# systems and equipment. 
# This includes: bandwidth, latency, jitter, packet loss and mean loss burst size 
# factor. It can also use SFQ mechanism to shape traffic. 
#

usage()
{
cat << EOF
USAGE: $0 [-hcspf] [-a <adapter>] [-d <rate>] [-u <rate>] [-t <delay>] [-j <jitter>] [-J <corelation>] [-l <loss>] [-m <value>]

Limit the bandwidth of an adapter, simulate packet loss, simulate traffic latency. 

OPTIONS:
   -h               Show this message
   -a <adapter>     Set the adpter
   -d <rate>        Set maximum download rate (in Kbps)
   -u <rate>        Set maximum upload rate (in Kbps)
   -t <delay>       Set latency (in ms)
   -j <jitter>      Set (average) latency variation (jitter) (in ms)
                    Use with -t option. 
   -J <corelation>  Set jitter corelation (in %) or 0 for normal
                    distribution
                    Use with -j option 
   -l <loss>        Set packet loss (in %)
   -m <value>       Set mean loss burst size factor. Valid values: 
                    4.00 3.33 3.00 2.85 2.50 2.22 2.00 1.82 1.66 1.54 
                    1.50 1.43 1.33 1.30 1.25 1.17 1.11 1.05 1.00
   -f               Use fair queuing - SFQ instead od pfifo 
   -p               Use presets in /etc/conf.d/trafficcontroller.conf
   -c               Clear the limits from adapter
   -s               Show the current status of adapter

MODES:
   trafficcontroller -a <adapter> -d <rate> -u <rate>
   trafficcontroller -a <adapter> -t <delay> -l <loss>
   trafficcontroller -c -a <adapter>
   trafficcontroller -s -a <adapter>

EXAMPLES:
   trafficcontroller -a eth0 -d 1024 -u 512
   trafficcontroller -c -a eth0

EOF
}

DSPEED=
USPEED=
IFACE=
MODE=
DELAY=0
LOSS=0
MLBS=0
SFQ=0
JITTER=0
CORELATION=-1

while getopts hd:u:a:t:l:j:J:m:pcsf o
do	case "$o" in
	h)	usage
		exit 1;;
	d)	DSPEED=$OPTARG;;
	u)      USPEED=$OPTARG;;
	t)      DELAY=$OPTARG;;
	j)      JITTER=$OPTARG;;
	J)      CORELATION=$OPTARG;;
	l)      LOSS=$OPTARG;;
	m)      MLBS=$OPTARG;;
	a)      IFACE=$OPTARG;;
	p)      MODE="presets";;
	c)      MODE="clear";;
	s)      MODE="status";;
	f)      SFQ=1;;
	[?])	usage
		exit 1;;
	esac
done

if [ "$MODE" = "presets" ]
then
    if [ -f /etc/conf.d/trafficcontroller.conf ]
    then 
	source /etc/conf.d/trafficcontroller.conf 
    else 
	echo "/etc/conf.d/trafficcontroller.conf not found"
	exit 1
    fi
fi

if [[ ! -z $MODE ]] && [[ -z $IFACE ]]
then
    echo "Please supply the adapter name for the mode."
    echo ""
    usage
    exit 1
fi

if [ "$MODE" = "status" ]
then
    tc -s qdisc ls dev $IFACE
    tc -s class ls dev $IFACE
    exit
fi

if [ "$MODE" = "clear" ]
then
    tc qdisc del dev $IFACE root    2> /dev/null > /dev/null
    tc qdisc del dev $IFACE ingress 2> /dev/null > /dev/null
    exit
fi


if [[ -z $IFACE ]]
then
    usage
    exit 1
fi


LOSS_PART=''
DELAY_PART=''

RFACTOR=0
PFACTOR=0
if (( $(bc <<< "$MLBS > 0.00") )); then
  case $MLBS in
    4.00) RFACTOR=25;;
    3.33) RFACTOR=30;;
    3.00) RFACTOR=33;;
    2.85) RFACTOR=35;;
    2.50) RFACTOR=40;;
    2.22) RFACTOR=45;;
    2.00) RFACTOR=50;;
    1.82) RFACTOR=55;;
    1.66) RFACTOR=60;;
    1.54) RFACTOR=65;;
    1.50) RFACTOR=66;;
    1.43) RFACTOR=70;;
    1.33) RFACTOR=75;;
    1.25) RFACTOR=80;;
    1.17) RFACTOR=85;;
    1.11) RFACTOR=90;;
    1.05) RFACTOR=95;;
    1.00) RFACTOR=100;;
    *) echo "Unsupported MLBS value."
       exit 1;;
  esac
  PFACTOR=$(bc <<< "scale=2;($LOSS/100*$RFACTOR/(1-$LOSS/100))")
fi

if [ $LOSS -ne 0 ]; then
  if (( $(bc <<< "$MLBS > 0.00") )); then
     LOSS_PART="loss gemodel ${PFACTOR}% ${RFACTOR}%"
  else
     LOSS_PART="loss ${LOSS}%"
  fi
fi

if [ $DELAY -ne 0 ]; then
  DELAY_PART="delay ${DELAY}ms "
  if [ $JITTER -ne 0 ]; then
    DELAY_PART=${DELAY_PART}${JITTER}"ms "
  fi
  if [ $CORELATION -eq 0 ]; then
    DELAY_PART=${DELAY_PART}$" distribution normal"
  elif [ $CORELATION -ne -1 ]; then
    DELAY_PART=${DELAY_PART}${CORELATION}"% "
  fi
fi


if [[ -z $DSPEED ]] || [[ -z $USPEED ]] 
then 
   if [ $LOSS -ne 0 ] || [ $DELAY -ne 0 ]; then 
      tc qdisc add dev $IFACE root netem $DELAY_PART $LOSS_PART
      exit 0
   else
      usage
      exit 1
   fi
fi

# low priority OUTGOING traffic - you can leave this blank if you want
# low priority source netmasks
NOPRIOHOSTSRC=80

# low priority destination netmasks
NOPRIOHOSTDST=

# low priority source ports
NOPRIOPORTSRC=

# low priority destination ports
NOPRIOPORTDST=



###### uplink

# install root CBQ

tc qdisc add dev $IFACE root handle 1: cbq avpkt 1000 bandwidth 10mbit 

# shape everything at $USPEED speed - this prevents huge queues in your
# DSL modem which destroy latency:
# main class

tc class add dev $IFACE parent 1: classid 1:1 cbq rate ${USPEED}kbit \
allot 1500 prio 5 bounded isolated 

# high prio class 1:10:

tc class add dev $IFACE parent 1:1 classid 1:10 cbq rate ${USPEED}kbit \
   allot 1600 prio 1 avpkt 1000

# bulk and default class 1:20 - gets slightly less traffic, 
#  and a lower priority:

tc class add dev $IFACE parent 1:1 classid 1:20 cbq rate $[9*$USPEED/10]kbit \
   allot 1600 prio 2 avpkt 1000

# 'traffic we hate'

tc class add dev $IFACE parent 1:1 classid 1:30 cbq rate $[8*$USPEED/10]kbit \
   allot 1600 prio 2 avpkt 1000

# all get Stochastic Fairness:
if [ $LOSS -ne 0 ] || [ $DELAY -ne 0 ]; then 
   tc qdisc add dev $IFACE parent 1:10 handle 10: netem $DELAY_PART $LOSS_PART
   tc qdisc add dev $IFACE parent 1:20 handle 20: netem $DELAY_PART $LOSS_PART
   tc qdisc add dev $IFACE parent 1:30 handle 30: netem $DELAY_PART $LOSS_PART
elif [ $SFQ -eq 1 ]; then
   tc qdisc add dev $IFACE parent 1:10 handle 10: sfq perturb 10
   tc qdisc add dev $IFACE parent 1:20 handle 20: sfq perturb 10
   tc qdisc add dev $IFACE parent 1:30 handle 30: sfq perturb 10
else
   tc qdisc add dev $IFACE parent 1:10 handle 10: pfifo
   tc qdisc add dev $IFACE parent 1:20 handle 20: pfifo
   tc qdisc add dev $IFACE parent 1:30 handle 30: pfifo
fi
# start filters
# TOS Minimum Delay (ssh, NOT scp) in 1:10:
tc filter add dev $IFACE parent 1:0 protocol ip prio 10 u32 \
      match ip tos 0x10 0xff  flowid 1:10

# ICMP (ip protocol 1) in the interactive class 1:10 so we 
# can do measurements & impress our friends:
tc filter add dev $IFACE parent 1:0 protocol ip prio 11 u32 \
        match ip protocol 1 0xff flowid 1:10

# prioritize small packets (<64 bytes)

tc filter add dev $IFACE parent 1: protocol ip prio 12 u32 \
   match ip protocol 6 0xff \
   match u8 0x05 0x0f at 0 \
   match u16 0x0000 0xffc0 at 2 \
   flowid 1:10


# some traffic however suffers a worse fate
for a in $NOPRIOPORTDST
do
	tc filter add dev $IFACE parent 1: protocol ip prio 14 u32 \
	   match ip dport $a 0xffff flowid 1:30
done

for a in $NOPRIOPORTSRC
do
 	tc filter add dev $IFACE parent 1: protocol ip prio 15 u32 \
	   match ip sport $a 0xffff flowid 1:30
done

for a in $NOPRIOHOSTSRC
do
 	tc filter add dev $IFACE parent 1: protocol ip prio 16 u32 \
	   match ip src $a flowid 1:30
done

for a in $NOPRIOHOSTDST
do
 	tc filter add dev $IFACE parent 1: protocol ip prio 17 u32 \
	   match ip dst $a flowid 1:30
done

# rest is 'non-interactive' ie 'bulk' and ends up in 1:20

tc filter add dev $IFACE parent 1: protocol ip prio 18 u32 \
   match ip dst 0.0.0.0/0 flowid 1:20


########## downlink #############
# slow downloads down to somewhat less than the real speed  to prevent 
# queuing at our ISP. Tune to see how high you can set it.
# ISPs tend to have *huge* queues to make sure big downloads are fast
#
# attach ingress policer:

tc qdisc add dev $IFACE handle ffff: ingress

# filter *everything* to it (0.0.0.0/0), drop everything that's
# coming in too fast:

tc filter add dev $IFACE parent ffff: protocol ip prio 50 u32 match ip src \
   0.0.0.0/0 police rate ${DSPEED}kbit burst 10k drop flowid :1

